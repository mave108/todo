{"version":3,"sources":["Components/Layout/Layout.js","Components/Task/Listing/Tasklisting.js","Components/Task/Add/Addtask.js","Containers/Todo/Todo.js","Components/HOC/Localstorage/Localstorage.js","App.js","serviceWorker.js","index.js"],"names":["Layout","props","react_default","a","createElement","className","style","marginTop","padding","textAlign","header","children","Tasklisting","tasks","map","task","done","textDecoration","key","id","wordBreak","title","onClick","deleteHandler","class","cursor","marginLeft","doneHandler","onSubmit","e","submitHandler","name","type","onChange","updateHandler","value","withLocalstorage","WrappedComponent","initialData","_React$Component","_class2","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","addNewtask","newtask","allTasks","objectSpread","guid","concat","toConsumableArray","state","localStorage","setItem","JSON","stringify","setState","findTaskById","filter","deleteTask","afterDeletion","upadteTask","tasktoUpdate","rawTasks","assign","console","log","s4","Math","floor","random","toString","substring","loadAllData","inherits","createClass","parse","getItem","React","Component","Todo","newTask","addTaskSubmitHandler","bind","assertThisInitialized","newTaskChangeHandler","deleteTaskHandler","taskStatusUpdateHandler","target","updatedTask","preventDefault","length","Components_Layout_Layout","Addtask","Listing_Tasklisting","App","Containers_Todo_Todo","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2d05c9a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Layout = (props) =>{\n\n    return(\n        <div className=\"container\" style={{marginTop:\"20px\"}}>\n        <div className=\"row justify-content-center\">        \n        <div className=\"col-xl-5 col-sm\">\n        <div className=\"jumbotron\" style={{padding:\"10px 0 0 0\"}}>\n            <h1 className=\"display-4\" style={{textAlign: \"center\"}}>{props.header}</h1>            \n            <hr className=\"my-4\" />\n            <div>{props.children}</div>\n            \n        </div>\n        </div>\n        </div>\n        </div>\n    );\n}\n\nexport default Layout;","import React from 'react';\n\nconst Tasklisting = (props) =>{\n   \n    const doneCmoponent = (id)=>{\n       return (\n           \n              <span class=\"badge badge-success\"\n                    style={{cursor:\"pointer\",marginLeft:\"10px\"}}\n                    onClick={()=>props.doneHandler(id)}>\n                Mark Completed</span>\n            \n       )\n    }\n\n    return (\n        <ul className=\"list-group\">\n            {props.tasks.map( (task) =>{\n                return (\n                    <li style={task.done?{textDecoration:\"line-through\"}:null} \n                        key={task.id} \n                        className=\"list-group-item\"                        \n                        >\n                        <span style={{wordBreak:\"break-all\"}}>{task.title}</span>                         \n                        <span onClick={()=>props.deleteHandler(task.id)} \n                              className=\"float-right close\">X</span>{' '}\n                              {!task.done && doneCmoponent(task.id)}\n                    </li>\n                )\n            })}\n        </ul> \n    );\n}\n\nexport default Tasklisting;","import React from 'react';\n\nconst Layout = (props) =>{\n        \n    return(        \n        <div className=\"container\">\n        <div className=\"row\">            \n                <form style={{padding: \"0 15px\"}} onSubmit={ (e)=>{props.submitHandler(e)}} name=\"add-task\" className=\"form-inline\">                                                      \n                    <input type=\"text\" \n                           name=\"addtask\" \n                           className=\"form-control col-xl-9\" \n                           onChange={props.updateHandler}\n                           value={props.value}\n                           />                         \n                        <button className=\"btn btn-outline-primary col-xl-3\"  type=\"submit\">Add</button>                                            \n                </form>           \n        </div>\n        </div>\n        \n    );\n}\n\nexport default Layout;","import React from 'react';\nimport Layout from '../../Components/Layout/Layout';\nimport Tasklisting from '../../Components/Task/Listing/Tasklisting';\nimport Addtask from '../../Components/Task/Add/Addtask';\nimport withLocalstorage from '../../Components/HOC/Localstorage/Localstorage';\n\nclass Todo extends React.Component{\n  \n    constructor(props){\n        super(props);\n        this.state = {           \n           newTask: ''\n        }\n        this.addTaskSubmitHandler = this.addTaskSubmitHandler.bind(this);\n        this.newTaskChangeHandler = this.newTaskChangeHandler.bind(this);   \n        this.deleteTaskHandler    = this.deleteTaskHandler.bind(this);     \n        this.taskStatusUpdateHandler = this.taskStatusUpdateHandler.bind(this);\n    }\n\n    componentDidMount(){\n        console.log(\"[did mount]\",this.props);        \n    }\n    \n    newTaskChangeHandler(e){\n        this.setState({newTask: e.target.value});\n    }\n    deleteTaskHandler(id){\n        this.props.deleteTask(id);\n    }\n    taskStatusUpdateHandler(id){\n        let updatedTask = this.props.findTaskById(id);\n        updatedTask.done = true;        \n        this.props.upadteTask(updatedTask);\n    }\n\n    addTaskSubmitHandler (e){        \n        e.preventDefault();\n        if(this.state.newTask.length < 3){\n            return ;\n        }                         \n        this.props.addNewtask({title: this.state.newTask,done: false});\n        this.setState({newTask:' '});        \n    }\n    render(){\n        return (\n            <Layout header=\"Todo\">\n                <Addtask value={this.state.newTask} \n                         submitHandler={this.addTaskSubmitHandler}\n                         updateHandler={this.newTaskChangeHandler}\n                        />\n                <br/>\n                <Tasklisting tasks={this.props.tasks} \n                             deleteHandler={this.deleteTaskHandler}\n                             doneHandler = {this.taskStatusUpdateHandler} />\n            </Layout>\n        );\n    }\n}\n\nexport default withLocalstorage(Todo);","import React from 'react';\nconst withLocalstorage = (WrappedComponent, initialData) => {\n    // ...and returns another component...\n    return class extends React.Component {\n      constructor(props) {\n        super(props);        \n        this.state = {\n          tasks: this.loadAllData(),          \n        };        \n      }\n      addNewtask = (newtask) =>{\n          let allTasks = [{...newtask,id:this.guid()},...this.state.tasks];\n          localStorage.setItem('todo_items',JSON.stringify(allTasks));\n          //update task state\n          this.setState({tasks: allTasks});\n      }\n      findTaskById = (id) =>{\n         return this.state.tasks.filter( task => task.id === id)[0]; \n      }\n      deleteTask = (id) =>{\n         const afterDeletion = this.state.tasks.filter( task => task.id !== id); \n         localStorage.setItem('todo_items',JSON.stringify(afterDeletion)); \n         this.setState({tasks: afterDeletion});\n      }\n      upadteTask = (tasktoUpdate) =>{          \n          const rawTasks = [...this.state.tasks];\n          Object.assign(rawTasks,tasktoUpdate); \n          console.log(\"update tasks\",rawTasks);\n          localStorage.setItem('todo_items',JSON.stringify(rawTasks));\n          this.setState({tasks: rawTasks});\n\n      }\n      loadAllData (){\n          return JSON.parse(localStorage.getItem('todo_items')) || [];\n      }\n\n        guid = () => {\n        function s4() {\n          return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n        }\n        return s4() + s4() + '-' + s4() + '-' + s4();\n      }\n        \n      render() {                \n        return <WrappedComponent \n                  tasks={this.state.tasks}\n                  addNewtask={this.addNewtask}\n                  deleteTask={this.deleteTask}\n                  upadteTask={this.upadteTask}\n                  findTaskById={this.findTaskById}\n                  {...this.props} />;\n      }\n    };\n  }\n\n  export default withLocalstorage;","import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\nimport Todo from './Containers/Todo/Todo';\n\n\nclass App extends Component {\n  render() {\n    return (\n      <Todo />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}